@page "/login"
@using Blazored.LocalStorage
@using Houlight.Web.Services
@using System.ComponentModel.DataAnnotations
@inject Blazored.LocalStorage.ILocalStorageService localStorage
@inject AuthHttpClient Http
@inject NavigationManager NavigationManager

<PageTitle>Giriş Yap - Houlight</PageTitle>

<div class="auth-container">
    <div class="auth-card">
        <div class="auth-header">
            <h2>Giriş Yap</h2>
            <p class="auth-subtitle">Houlight'a hoş geldiniz</p>
        </div>

        @if (!string.IsNullOrEmpty(errorMessage))
        {
            <div class="auth-alert">
                <i class="bi bi-exclamation-circle-fill"></i>
                <span>@errorMessage</span>
            </div>
        }

        <EditForm Model="@loginModel" OnValidSubmit="HandleLogin" class="auth-form">
            <DataAnnotationsValidator />
            
            <div class="form-floating mb-4">
                <InputText type="email" id="email" class="form-control" @bind-Value="loginModel.Email" placeholder="ornek@email.com" />
                <label for="email">E-posta</label>
                <ValidationMessage For="@(() => loginModel.Email)" class="validation-message" />
            </div>

            <div class="form-floating mb-4">
                <InputText type="password" id="password" class="form-control" @bind-Value="loginModel.Password" placeholder="Şifre" />
                <label for="password">Şifre</label>
                <ValidationMessage For="@(() => loginModel.Password)" class="validation-message" />
            </div>

            <button type="submit" class="auth-submit-btn" disabled="@(isLoading)">
                @if (isLoading)
                {
                    <span class="spinner-border spinner-border-sm me-2" role="status" aria-hidden="true"></span>
                    <span>Giriş Yapılıyor...</span>
                }
                else
                {
                    <i class="bi bi-box-arrow-in-right me-2"></i>
                    <span>Giriş Yap</span>
                }
            </button>
        </EditForm>

        <div class="auth-footer">
            <p>Hesabınız yok mu?</p>
            <a href="/register" class="auth-link">
                <i class="bi bi-person-plus me-2"></i>
                Kayıt Ol
            </a>
        </div>
    </div>
</div>

@code {
    private LoginModel loginModel = new();
    private string errorMessage = "";
    private bool isLoading = false;

    private class LoginModel
    {
        [Required(ErrorMessage = "E-posta alanı boş olamaz.")]
        [EmailAddress(ErrorMessage = "Geçerli bir e-posta adresi giriniz.")]
        public string Email { get; set; } = "";

        [Required(ErrorMessage = "Şifre alanı boş olamaz.")]
        public string Password { get; set; } = "";
    }

    private async Task HandleLogin()
    {
        errorMessage = string.Empty;
        isLoading = true;
        try
        {
            var response = await Http.PostAsync<LoginCustomerResponse>("api/customers/login", new { 
                Email = loginModel.Email, 
                Password = loginModel.Password 
            });
            
            if (response != null && response.Success && !string.IsNullOrEmpty(response.Token))
            {
                await localStorage.SetItemAsync("authToken", response.Token);
                await localStorage.SetItemAsync("userType", "customer");
                await localStorage.SetItemAsync("userName", response.Name);
                await localStorage.SetItemAsync("userId", response.UserId.ToString());
                NavigationManager.NavigateTo("/customer/dashboard", true);
            }
            else
            {
                errorMessage = response?.Message ?? "Giriş başarısız. Lütfen bilgilerinizi kontrol edin.";
            }
        }
        catch
        {
            errorMessage = "Sunucuya ulaşılamıyor. Lütfen daha sonra tekrar deneyin.";
        }
        isLoading = false;
    }

    public class LoginCustomerResponse
    {
        public bool Success { get; set; }
        public string Token { get; set; } = string.Empty;
        public string Message { get; set; } = string.Empty;
        public string Name { get; set; } = string.Empty;
        public Guid UserId { get; set; }
    }
} 