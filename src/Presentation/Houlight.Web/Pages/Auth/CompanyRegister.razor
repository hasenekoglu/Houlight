@page "/company/register"
@using Blazored.LocalStorage
@using Houlight.Web.Services
@using System.ComponentModel.DataAnnotations
@inject AuthHttpClient Http
@inject NavigationManager NavigationManager

<PageTitle>Şirket Kaydı - Houlight</PageTitle>

<div class="auth-container">
    <div class="auth-card register-card">
        <div class="auth-header">
            <h2>Şirket Kaydı</h2>
            <p class="auth-subtitle">Houlight'a hoş geldiniz</p>
        </div>

        @if (!string.IsNullOrEmpty(errorMessage))
        {
            <div class="auth-alert">
                <i class="bi bi-exclamation-circle-fill"></i>
                <span>@errorMessage</span>
            </div>
        }

        <EditForm Model="@registerModel" OnValidSubmit="HandleRegister" class="auth-form">
            <DataAnnotationsValidator />
            
            <div class="form-floating mb-3">
                <InputText id="companyName" class="form-control" @bind-Value="registerModel.CompanyName" placeholder="Şirket Adı" />
                <label for="companyName">Şirket Adı</label>
                <ValidationMessage For="@(() => registerModel.CompanyName)" class="validation-message" />
            </div>

            <div class="form-floating mb-3">
                <InputTextArea id="companyAddress" class="form-control" @bind-Value="registerModel.CompanyAddress" placeholder="Şirket Adresi" style="height: 100px" />
                <label for="companyAddress">Şirket Adresi</label>
                <ValidationMessage For="@(() => registerModel.CompanyAddress)" class="validation-message" />
            </div>

            <div class="form-floating mb-3">
                <InputText id="companyPhoneNumber" class="form-control" @bind-Value="registerModel.CompanyPhoneNumber" placeholder="5XXXXXXXXX" />
                <label for="companyPhoneNumber">Telefon</label>
                <ValidationMessage For="@(() => registerModel.CompanyPhoneNumber)" class="validation-message" />
                <small class="form-text">Örnek: 5XXXXXXXXX (10 haneli)</small>
            </div>

            <div class="form-floating mb-3">
                <InputText type="email" id="companyEmail" class="form-control" @bind-Value="registerModel.CompanyEmail" placeholder="sirket@email.com" />
                <label for="companyEmail">E-posta</label>
                <ValidationMessage For="@(() => registerModel.CompanyEmail)" class="validation-message" />
            </div>

            <div class="form-floating mb-3">
                <InputText type="password" id="password" class="form-control" @bind-Value="registerModel.Password" placeholder="Şifre" />
                <label for="password">Şifre</label>
                <ValidationMessage For="@(() => registerModel.Password)" class="validation-message" />
                <small class="form-text">En az 6 karakter</small>
            </div>

            <div class="form-floating mb-4">
                <InputText type="password" id="confirmPassword" class="form-control" @bind-Value="confirmPassword" placeholder="Şifre Tekrar" />
                <label for="confirmPassword">Şifre Tekrar</label>
                @if (!string.IsNullOrEmpty(passwordError))
                {
                    <div class="validation-message">@passwordError</div>
                }
            </div>

            <button type="submit" class="auth-submit-btn" disabled="@(isLoading)">
                @if (isLoading)
                {
                    <span class="spinner-border spinner-border-sm me-2" role="status" aria-hidden="true"></span>
                    <span>Kayıt Yapılıyor...</span>
                }
                else
                {
                    <i class="bi bi-building-add me-2"></i>
                    <span>Kayıt Ol</span>
                }
            </button>
        </EditForm>

        <div class="auth-footer">
            <p>Zaten kayıtlı bir şirket misiniz?</p>
            <a href="/company/login" class="auth-link">
                <i class="bi bi-box-arrow-in-right me-2"></i>
                Giriş Yap
            </a>
        </div>
    </div>
</div>

@code {
    private RegisterModel registerModel = new();
    private string confirmPassword = "";
    private string passwordError = "";
    private string errorMessage = "";
    private bool isLoading = false;

    private class RegisterModel
    {
        [Required(ErrorMessage = "Şirket adı alanı boş olamaz.")]
        [StringLength(100, ErrorMessage = "Şirket adı 100 karakterden uzun olamaz.")]
        public string CompanyName { get; set; } = "";

        [Required(ErrorMessage = "Şirket adresi alanı boş olamaz.")]
        [StringLength(200, ErrorMessage = "Şirket adresi 200 karakterden uzun olamaz.")]
        public string CompanyAddress { get; set; } = "";

        [Required(ErrorMessage = "Telefon numarası alanı boş olamaz.")]
        [RegularExpression(@"^[0-9]{10}$", ErrorMessage = "Telefon numarası 10 haneli olmalıdır.")]
        public string CompanyPhoneNumber { get; set; } = "";

        [Required(ErrorMessage = "E-posta alanı boş olamaz.")]
        [EmailAddress(ErrorMessage = "Geçerli bir e-posta adresi giriniz.")]
        [StringLength(100, ErrorMessage = "E-posta alanı 100 karakterden uzun olamaz.")]
        public string CompanyEmail { get; set; } = "";

        [Required(ErrorMessage = "Şifre alanı boş olamaz.")]
        [StringLength(50, MinimumLength = 6, ErrorMessage = "Şifre 6-50 karakter arasında olmalıdır.")]
        public string Password { get; set; } = "";
    }

    private async Task HandleRegister()
    {
        errorMessage = string.Empty;
        passwordError = string.Empty;

        if (registerModel.Password != confirmPassword)
        {
            passwordError = "Şifreler uyuşmuyor.";
            return;
        }

        isLoading = true;
        try
        {
            var response = await Http.PostAsync<object>("api/logisticscompanies", new {
                CompanyName = registerModel.CompanyName,
                CompanyAddress = registerModel.CompanyAddress,
                CompanyPhoneNumber = registerModel.CompanyPhoneNumber,
                CompanyEmail = registerModel.CompanyEmail,
                Password = registerModel.Password
            });
            
            if (response != null)
            {
                NavigationManager.NavigateTo("/company/login", true);
            }
        }
        catch (HttpRequestException ex)
        {
            if (ex.Message.Contains("ValidationException"))
            {
                // Backend'den gelen validation hatası
                errorMessage = "Bu e-posta adresi zaten kullanılıyor. Lütfen başka bir e-posta adresi deneyin.";
            }
            else
            {
                errorMessage = "Sunucuya ulaşılamıyor. Lütfen daha sonra tekrar deneyin.";
            }
            Console.WriteLine($"Kayıt hatası: {ex.Message}");
        }
        catch (Exception ex)
        {
            errorMessage = "Beklenmeyen bir hata oluştu. Lütfen daha sonra tekrar deneyin.";
            Console.WriteLine($"Kayıt hatası: {ex.Message}");
        }
        finally
        {
            isLoading = false;
        }
    }
} 