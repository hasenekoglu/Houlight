@page "/company/loads"
@using Houlight.Domain.Entities
@using Houlight.Domain.Enums
@using Houlight.Web.Services
@using Blazored.LocalStorage
@using System.ComponentModel.DataAnnotations
@using System.Net.Http
@using Houlight.Application.Features.LoadOffers.Commands.CreateLoadOffer
@inject AuthHttpClient Http
@inject ILocalStorageService localStorage
@inject NavigationManager NavigationManager

<PageTitle>Yükler - Houlight</PageTitle>

<div class="container py-4">
    @if (!string.IsNullOrEmpty(errorMessage))
    {
        <div class="alert alert-danger alert-dismissible fade show" role="alert">
            <i class="bi bi-exclamation-triangle-fill me-2"></i>
            @errorMessage
            <button type="button" class="btn-close" @onclick="() => errorMessage = string.Empty"></button>
        </div>
    }

    @if (!string.IsNullOrEmpty(successMessage))
    {
        <div class="alert alert-success alert-dismissible fade show" role="alert">
            <i class="bi bi-check-circle-fill me-2"></i>
            @successMessage
            <button type="button" class="btn-close" @onclick="() => successMessage = string.Empty"></button>
        </div>
    }

    <div class="d-flex justify-content-between align-items-center mb-4">
        <h4 class="mb-0">Yükler</h4>
        <a href="/company/dashboard" class="dashboard-back-btn">
            <i class="bi bi-arrow-left"></i>
            Dashboard'a Dön
        </a>
    </div>

    <div class="card shadow-sm border-0 mb-4">
        <div class="card-body">
            <div class="row g-3">
                <div class="col-md-4">
                    <div class="input-group">
                        <span class="input-group-text bg-light border-end-0">
                            <i class="bi bi-search text-muted"></i>
                        </span>
                        <input type="text" class="form-control border-start-0" placeholder="Yük ara..." @bind="searchTerm" @bind:event="oninput" @onkeyup="HandleSearch" />
                    </div>
                </div>
                <div class="col-md-3">
                    <select class="form-select" @bind="selectedStatus">
                        <option value="">Tüm Durumlar</option>
                        <option value="@LoadStatus.Pending">Beklemede</option>
                        <option value="@LoadStatus.Assigned">Atandı</option>
                        <option value="@LoadStatus.Accepted">Kabul Edildi</option>
                        <option value="@LoadStatus.Rejected">Reddedildi</option>
                    </select>
                </div>
                <div class="col-md-3">
                    <select class="form-select" @bind="selectedVehicleType">
                        <option value="">Tüm Araç Tipleri</option>
                        @foreach (var type in vehicleTypes)
                        {
                            <option value="@type.Id">@type.Name</option>
                        }
                    </select>
                </div>
                <div class="col-md-2">
                    <button class="btn btn-houlight-accent w-100" @onclick="ApplyFilters">
                        <i class="bi bi-funnel me-1"></i>
                        Filtrele
                    </button>
                </div>
            </div>
        </div>
    </div>

    @if (isLoading)
    {
        <div class="text-center py-5">
            <div class="spinner-border text-houlight-accent" role="status">
                <span class="visually-hidden">Yükleniyor...</span>
            </div>
            <p class="text-muted mt-2">Yükler yükleniyor...</p>
        </div>
    }
    else if (filteredLoads == null || !filteredLoads.Any())
    {
        <div class="text-center py-5">
            <i class="bi bi-truck fs-1 text-muted mb-3"></i>
            <p class="text-muted mb-0">Gösterilecek yük bulunamadı.</p>
        </div>
    }
    else
    {
        <div class="row g-4">
            @foreach (var load in filteredLoads)
            {
                <div class="col-md-6 col-lg-4">
                    <div class="card shadow-sm border-0 h-100">
                        <div class="card-body">
                            <div class="d-flex justify-content-between align-items-start mb-3">
                                <h5 class="card-title mb-0">@load.Title</h5>
                                <span class="badge @GetLoadStatusBadgeClass(load.Status)">@GetLoadStatusText(load.Status)</span>
                            </div>
                            <div class="mb-3">
                                <div class="d-flex align-items-center mb-2">
                                    <i class="bi bi-geo-alt text-houlight-accent me-2"></i>
                                    <div>
                                        <small class="text-muted d-block">Alış</small>
                                        <span>@load.FromLocation</span>
                                    </div>
                                </div>
                                <div class="d-flex align-items-center">
                                    <i class="bi bi-geo-alt-fill text-houlight-accent me-2"></i>
                                    <div>
                                        <small class="text-muted d-block">Teslimat</small>
                                        <span>@load.ToLocation</span>
                                    </div>
                                </div>
                            </div>
                            <div class="row g-2 mb-3">
                                <div class="col-6">
                                    <div class="p-2 bg-light rounded">
                                        <small class="text-muted d-block">Araç Tipi</small>
                                        <span>@load.VehicleTypeName</span>
                                    </div>
                                </div>
                                <div class="col-6">
                                    <div class="p-2 bg-light rounded">
                                        <small class="text-muted d-block">Ağırlık</small>
                                        <span>@load.Weight ton</span>
                                    </div>
                                </div>
                            </div>
                            <div class="d-flex justify-content-between align-items-center">
                                <div>
                                    <small class="text-muted d-block">Teklif</small>
                                    <span class="fw-bold">@(load.CustomerExpectedPrice?.ToString("N2") ?? "0.00") TL</span>
                                </div>
                                @if (load.Status == LoadStatus.Pending)
                                {
                                    <button class="btn btn-houlight-accent" @onclick="() => ShowOfferModal(load)">
                                        <i class="bi bi-cash-coin me-1"></i>
                                        Teklif Ver
                                    </button>
                                }
                                else
                                {
                                    <button class="btn btn-outline-secondary" disabled>
                                        <i class="bi bi-lock me-1"></i>
                                        Teklif Verilemez
                                    </button>
                                }
                            </div>
                        </div>
                    </div>
                </div>
            }
        </div>
    }

    @if (showOfferModal)
    {
        <div class="modal fade show" style="display: block; background-color: rgba(0,0,0,0.5); z-index: 1050;" tabindex="-1">
            <div class="modal-dialog modal-dialog-centered modal-lg" style="z-index: 1051;">
                <div class="modal-content">
                    <div class="modal-header">
                        <h5 class="modal-title">Teklif Ver</h5>
                        <button type="button" class="btn-close" @onclick="CloseOfferModal"></button>
                    </div>
                    <EditForm Model="@offerModel" OnValidSubmit="SubmitOffer">
                        <DataAnnotationsValidator />
                        <div class="modal-body">
                            @if (selectedLoad != null)
                            {
                                <div class="row g-3">
                                    <div class="col-md-6">
                                        <div class="p-3 bg-light rounded">
                                            <h6 class="mb-3">Yük Bilgileri</h6>
                                            <div class="mb-2">
                                                <small class="text-muted d-block">Başlık</small>
                                                <span>@selectedLoad.Title</span>
                                            </div>
                                            <div class="mb-2">
                                                <small class="text-muted d-block">Güzergah</small>
                                                <span>@selectedLoad.FromLocation - @selectedLoad.ToLocation</span>
                                            </div>
                                            <div class="mb-2">
                                                <small class="text-muted d-block">Yük Tipi</small>
                                                <span>@GetLoadTypeText(selectedLoad.LoadType)</span>
                                            </div>
                                            <div class="mb-2">
                                                <small class="text-muted d-block">Ağırlık</small>
                                                <span>@(selectedLoad.Weight.ToString("N0")) kg</span>
                                            </div>
                                            <div class="mb-2">
                                                <small class="text-muted d-block">Hacim</small>
                                                <span>@(selectedLoad.Volume.ToString("N0")) m³</span>
                                            </div>
                                            <div class="mb-2">
                                                <small class="text-muted d-block">Müşteri Beklentisi</small>
                                                <span class="fw-bold">@(selectedLoad.CustomerExpectedPrice?.ToString("N2") ?? "-") TL</span>
                                            </div>
                                            @if (!string.IsNullOrEmpty(selectedLoad.Description))
                                            {
                                                <div>
                                                    <small class="text-muted d-block">Açıklama</small>
                                                    <span>@selectedLoad.Description</span>
                                                </div>
                                            }
                                        </div>
                                    </div>
                                    <div class="col-md-6">
                                        <div class="p-3 bg-light rounded">
                                            <h6 class="mb-3">Teklif Bilgileri</h6>
                                            <div class="mb-3">
                                                <label class="form-label">Teklif Fiyatı (TL)</label>
                                                <InputNumber @bind-Value="offerModel.CompanyOfferedPrice" class="form-control" />
                                                <ValidationMessage For="@(() => offerModel.CompanyOfferedPrice)" />
                                            </div>
                                            <div class="mb-3">
                                                <label class="form-label">Araç Seçin</label>
                                                <select @bind="offerModel.AssignedVehicleId" class="form-select">
                                                    <option value="">Araç Seçin</option>
                                                    @foreach (var vehicle in availableVehicles)
                                                    {
                                                        <option value="@vehicle.Id">@vehicle.PlateNumber - @vehicle.VehicleTypeType (@vehicle.Capacity.ToString("N0") kg)</option>
                                                    }
                                                </select>
                                                <ValidationMessage For="@(() => offerModel.AssignedVehicleId)" />
                                            </div>
                                            <div class="mb-3">
                                                <label class="form-label">Sürücü Seçin</label>
                                                <select @bind="offerModel.AssignedDriverId" class="form-select">
                                                    <option value="">Sürücü Seçin</option>
                                                    @foreach (var driver in availableDrivers.Where(d => d.DriverStatus == DriverStatus.Available))
                                                    {
                                                        <option value="@driver.Id">@driver.Name @driver.Surname - @driver.LicenseNumber</option>
                                                    }
                                                </select>
                                                <ValidationMessage For="@(() => offerModel.AssignedDriverId)" />
                                            </div>
                                        </div>
                                    </div>
                                </div>
                            }
                        </div>
                        <div class="modal-footer">
                            <button type="button" class="btn btn-secondary" @onclick="CloseOfferModal">İptal</button>
                            <button type="submit" class="btn btn-houlight-accent" disabled="@isSubmitting">
                                @if (isSubmitting)
                                {
                                    <span class="spinner-border spinner-border-sm me-1" role="status" aria-hidden="true"></span>
                                    <span>Teklif Veriliyor...</span>
                                }
                                else
                                {
                                    <span>Teklif Ver</span>
                                }
                            </button>
                        </div>
                    </EditForm>
                </div>
            </div>
        </div>
    }
</div>

@code {
    private List<LoadModel> loads = new();
    private List<LoadModel> filteredLoads = new();
    private List<VehicleTypeModel> vehicleTypes = new();
    private string searchTerm = "";
    private LoadStatus? selectedStatus;
    private Guid? selectedVehicleType;
    private bool isLoading = true;
    private bool isSubmitting = false;
    private string errorMessage = "";
    private string successMessage = "";
    private bool showOfferModal = false;
    private LoadModel selectedLoad;
    private OfferModel offerModel = new();
    private List<VehicleModel> availableVehicles = new();
    private List<DriverModel> availableDrivers = new();

    private class LoadModel
    {
        public Guid Id { get; set; }
        public string Title { get; set; } = string.Empty;
        public string FromLocation { get; set; } = string.Empty;
        public string ToLocation { get; set; } = string.Empty;
        public LoadType LoadType { get; set; }
        public int Weight { get; set; }
        public int Volume { get; set; }
        public string Description { get; set; } = string.Empty;
        public DateTime? DeliveryDate { get; set; }
        public decimal? CustomerExpectedPrice { get; set; }
        public LoadStatus Status { get; set; }
        public Guid VehicleTypeId { get; set; }
        public string VehicleTypeName { get; set; } = string.Empty;
    }

    private class VehicleTypeModel
    {
        public Guid Id { get; set; }
        public string Name { get; set; } = string.Empty;
    }

    private class OfferModel
    {
        public Guid LoadId { get; set; }
        [Required(ErrorMessage = "Teklif fiyatı zorunludur.")]
        [Range(0.01, double.MaxValue, ErrorMessage = "Teklif fiyatı 0'dan büyük olmalıdır.")]
        public decimal CompanyOfferedPrice { get; set; }
        [Required(ErrorMessage = "Araç seçimi zorunludur.")]
        public Guid? AssignedVehicleId { get; set; }
        [Required(ErrorMessage = "Sürücü seçimi zorunludur.")]
        public Guid? AssignedDriverId { get; set; }
    }

    private class VehicleModel
    {
        public Guid Id { get; set; }
        public string PlateNumber { get; set; } = string.Empty;
        public string VehicleTypeType { get; set; } = string.Empty;
        public Guid VehicleTypeId { get; set; }
        public int Capacity { get; set; }
        public bool IsAvailable { get; set; }
    }

    private class DriverModel
    {
        public Guid Id { get; set; }
        public string Name { get; set; } = string.Empty;
        public string Surname { get; set; } = string.Empty;
        public string LicenseNumber { get; set; } = string.Empty;
        public DriverStatus DriverStatus { get; set; }
    }

    protected override async Task OnInitializedAsync()
    {
        await LoadData();
    }

    private async Task LoadData()
    {
        try
        {
            isLoading = true;
            errorMessage = string.Empty;

            var loadsTask = Http.GetAsync<List<LoadModel>>("api/loads");
            var vehicleTypesTask = Http.GetAsync<List<VehicleTypeModel>>("api/vehicletypes");

            await Task.WhenAll(loadsTask, vehicleTypesTask);

            loads = await loadsTask ?? new List<LoadModel>();
            vehicleTypes = await vehicleTypesTask ?? new List<VehicleTypeModel>();
            filteredLoads = new List<LoadModel>(loads);

            ApplyFilters();
        }
        catch (Exception ex)
        {
            errorMessage = "Veriler yüklenirken bir hata oluştu: " + ex.Message;
            Console.WriteLine($"[Loads] Hata: {ex}");
            loads = new List<LoadModel>();
            vehicleTypes = new List<VehicleTypeModel>();
            filteredLoads = new List<LoadModel>();
        }
        finally
        {
            isLoading = false;
            StateHasChanged();
        }
    }

    private void HandleSearch(KeyboardEventArgs e)
    {
        if (e.Key == "Enter")
        {
            ApplyFilters();
        }
    }

    private void ApplyFilters()
    {
        if (loads == null)
        {
            filteredLoads = new List<LoadModel>();
            return;
        }

        filteredLoads = loads;

        if (!string.IsNullOrWhiteSpace(searchTerm))
        {
            var searchTermLower = searchTerm.ToLower();
            filteredLoads = filteredLoads.Where(x =>
                x.Title.ToLower().Contains(searchTermLower) ||
                x.FromLocation.ToLower().Contains(searchTermLower) ||
                x.ToLocation.ToLower().Contains(searchTermLower)
            ).ToList();
        }

        if (selectedStatus.HasValue)
        {
            filteredLoads = filteredLoads.Where(x => x.Status == selectedStatus.Value).ToList();
        }

        if (selectedVehicleType.HasValue)
        {
            filteredLoads = filteredLoads.Where(x => x.VehicleTypeId == selectedVehicleType.Value).ToList();
        }
    }

    private async Task ShowOfferModal(LoadModel load)
    {
        try
        {
            selectedLoad = load;
            offerModel = new OfferModel { LoadId = load.Id };
            showOfferModal = true;

            var companyId = await GetCompanyId();
            if (companyId == Guid.Empty) return;

            // Uygun araçları getir
            var vehiclesResponse = await Http.GetAsync<List<VehicleModel>>($"api/vehicles/filter?logisticsCompanyId={companyId}");
            availableVehicles = vehiclesResponse?.Where(v => v.IsAvailable).ToList() ?? new List<VehicleModel>();

            // Uygun sürücüleri getir
            var driversResponse = await Http.GetAsync<List<DriverModel>>($"api/drivers/filter?logisticsCompanyId={companyId}&driverStatus=Available");
            availableDrivers = driversResponse?.Where(d => d.DriverStatus == DriverStatus.Available).ToList() ?? new List<DriverModel>();

            if (!availableVehicles.Any())
            {
                errorMessage = "Kullanılabilir araç bulunamadı.";
            }
            if (!availableDrivers.Any())
            {
                errorMessage = "Müsait sürücü bulunamadı.";
            }
        }
        catch (Exception ex)
        {
            errorMessage = "Araç ve sürücü bilgileri yüklenirken bir hata oluştu: " + ex.Message;
            Console.WriteLine($"[Loads] Hata: {ex}");
        }
    }

    private void CloseOfferModal()
    {
        showOfferModal = false;
        selectedLoad = null;
        offerModel = new OfferModel();
    }

    private async Task SubmitOffer()
    {
        try
        {
            isSubmitting = true;
            errorMessage = string.Empty;

            var companyId = await GetCompanyId();
            if (companyId == Guid.Empty) return;

            if (!offerModel.AssignedVehicleId.HasValue || !offerModel.AssignedDriverId.HasValue)
            {
                errorMessage = "Lütfen araç ve sürücü seçiniz.";
                return;
            }

            var command = new CreateLoadOfferCommand
            {
                LoadId = offerModel.LoadId,
                CompanyOfferedPrice = offerModel.CompanyOfferedPrice,
                LogisticsCompanyId = companyId,
                AssignedVehicleId = offerModel.AssignedVehicleId.Value,
                AssignedDriverId = offerModel.AssignedDriverId.Value
            };

            var response = await Http.PostAsync<CreateLoadOfferResponse>("api/loadoffers/create", command);

            if (response != null && response.Id != Guid.Empty)
            {
                successMessage = "Teklifiniz başarıyla gönderildi.";
                await LoadData();
                CloseOfferModal();
            }
            else
            {
                errorMessage = "Teklif gönderilirken bir hata oluştu.";
            }
        }
        catch (Exception ex)
        {
            errorMessage = "Teklif gönderilirken bir hata oluştu: " + ex.Message;
            Console.WriteLine($"[Loads] Hata: {ex}");
        }
        finally
        {
            isSubmitting = false;
        }
    }

    private string GetLoadStatusBadgeClass(LoadStatus status)
    {
        return status switch
        {
            LoadStatus.Pending => "bg-warning",
            LoadStatus.Assigned => "bg-primary",
            LoadStatus.InTransit => "bg-info",
            LoadStatus.Delivered => "bg-success",
            LoadStatus.Accepted => "bg-success",
            LoadStatus.Rejected => "bg-danger",
            _ => "bg-houlight-accent"
        };
    }

    private string GetLoadStatusText(LoadStatus status)
    {
        return status switch
        {
            LoadStatus.Pending => "Beklemede",
            LoadStatus.Assigned => "Atandı",
            LoadStatus.InTransit => "Yolda",
            LoadStatus.Delivered => "Teslim Edildi",
            LoadStatus.Accepted => "Kabul Edildi",
            LoadStatus.Rejected => "Reddedildi",
            _ => status.ToString()
        };
    }

    private string GetLoadTypeText(LoadType loadType)
    {
        return loadType switch
        {
            LoadType.GeneralCargo => "Genel Kargo",
            LoadType.PerishableGoods => "Bozulabilir Ürünler",
            LoadType.HazardousMaterials => "Tehlikeli Maddeler",
            LoadType.FragileItems => "Kırılabilir Eşyalar",
            LoadType.BulkCargo => "Dökme Kargo",
            LoadType.Liquid => "Sıvı Kargo",
            LoadType.HighValue => "Yüksek Değerli Ürünler",
            LoadType.TemperatureSensitive => "Sıcaklık Hassas Ürünler",
            LoadType.DangerousGoods => "Tehlikeli Mallar",
            _ => "Bilinmeyen Yük Tipi"
        };
    }

    private async Task<Guid> GetCompanyId()
    {
        try
        {
            var companyId = await localStorage.GetItemAsync<Guid>("companyId");
            if (companyId == Guid.Empty)
            {
                NavigationManager.NavigateTo("/login");
                return Guid.Empty;
            }
            return companyId;
        }
        catch (Exception ex)
        {
            errorMessage = "Şirket bilgisi alınırken bir hata oluştu: " + ex.Message;
            Console.WriteLine($"[Loads] Hata: {ex}");
            NavigationManager.NavigateTo("/login");
            return Guid.Empty;
        }
    }
} 