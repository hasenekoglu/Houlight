@page "/customer/offers"
@using Houlight.Application.Features.LoadOffers.Commands.AcceptLoadOffer
@using Houlight.Application.Features.LoadOffers.Commands.DeleteLoadOffer
@using Houlight.Domain.Entities
@using Houlight.Domain.Enums
@using Houlight.Web.Services
@using Blazored.LocalStorage
@using Houlight.Application.Features.LoadOffers.Queries.GetLoadOfferList
@inject AuthHttpClient Http
@inject ILocalStorageService localStorage
@inject NavigationManager NavigationManager

<PageTitle>Tekliflerim - Houlight</PageTitle>

<div class="container py-4">
    @if (!string.IsNullOrEmpty(errorMessage))
    {
        <div class="alert alert-danger alert-dismissible fade show" role="alert">
            @errorMessage
            <button type="button" class="btn-close" @onclick="() => errorMessage = string.Empty"></button>
        </div>
    }

    <div class="d-flex justify-content-between align-items-center mb-4">
        <h4 class="mb-0">Tekliflerim</h4>
        <a href="/customer/dashboard" class="dashboard-back-btn">
            <i class="bi bi-arrow-left"></i>
            Dashboard'a Dön
        </a>
    </div>
    
    @if (isLoading)
    {
        <div class="text-center py-4">
            <div class="spinner-border text-primary" role="status">
                <span class="visually-hidden">Yükleniyor...</span>
            </div>
        </div>
    }
    else if (offers.Count == 0)
    {
        <div class="alert alert-info">Henüz teklifiniz bulunmamaktadır.</div>
    }
    else
    {
        @foreach (var loadGroup in GroupedOffers)
        {
            var firstOffer = loadGroup.First();
            <div class="mb-4">
                <div class="card shadow-sm border-0 mb-2 bg-light">
                    <div class="card-body d-flex flex-wrap align-items-center justify-content-between">
                        <div>
                            <strong>Yük No:</strong> @firstOffer.LoadId.ToString().Substring(0, 8)
                            <span class="mx-2">|</span>
                            <strong>Rota:</strong> @firstOffer.FromLocation → @firstOffer.ToLocation
                            <span class="mx-2">|</span>
                            <strong>Tip:</strong> @GetLoadTypeName(firstOffer.LoadType)
                            <span class="mx-2">|</span>
                            <strong>Ağırlık:</strong> @firstOffer.Weight kg
                            <span class="mx-2">|</span>
                            <strong>Hacim:</strong> @firstOffer.Volume m³
                        </div>
                        <div>
                            <strong>Teslimat:</strong> @firstOffer.DeliveryDate?.ToShortDateString()
                        </div>
                    </div>
                </div>
                <div class="row g-3">
                    @foreach (var offer in loadGroup)
                    {
                        var cardClass = offer.IsAccepted ? "border-success" : "border-danger";
                        <div class="col-12 col-md-6 col-lg-4">
                            <div class="card h-100 @cardClass shadow-sm">
                                <div class="card-body">
                                    <div class="d-flex justify-content-between align-items-center mb-2">
                                        <span class="fw-bold">@offer.LogisticsCompanyName</span>
                                        @if (offer.IsAccepted)
                                        {
                                            <span class="badge bg-success">Kabul Edildi</span>
                                        }
                                        else
                                        {
                                            <span class="badge bg-danger">Reddedildi</span>
                                        }
                                    </div>
                                    <div class="mb-2">
                                        <strong>Fiyat:</strong> @offer.CompanyOfferedPrice.ToString("C")
                                    </div>
                                    <div class="mb-2">
                                        <strong>Araç:</strong> @offer.VehiclePlate
                                    </div>
                                    <div class="mb-2">
                                        <strong>Şoför:</strong> @offer.DriverName
                                    </div>
                                    <div class="mb-2">
                                        <strong>Açıklama:</strong> @offer.Description
                                    </div>
                                </div>
                                <div class="card-footer bg-white border-0 d-flex justify-content-end">
                                    <button class="btn btn-sm btn-outline-primary me-2" @onclick="() => ShowOfferDetails(offer)">
                                        <i class="bi bi-eye"></i>
                                    </button>
                                    @if (!offer.IsAccepted)
                                    {
                                        <button class="btn btn-sm btn-outline-success me-2" @onclick="() => AcceptOffer(offer)">
                                            <i class="bi bi-check-lg"></i>
                                        </button>
                                        <button class="btn btn-sm btn-outline-danger" @onclick="() => RejectOffer(offer)">
                                            <i class="bi bi-x-lg"></i>
                                        </button>
                                    }
                                </div>
                            </div>
                        </div>
                    }
                </div>
            </div>
        }
    }
</div>

@if (selectedOffer != null)
{
    <div class="modal fade show" style="display: block;" tabindex="-1">
        <div class="modal-dialog">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title">Teklif Detayları</h5>
                    <button type="button" class="btn-close" @onclick="() => selectedOffer = null"></button>
                </div>
                <div class="modal-body">
                    <dl class="row">
                        <dt class="col-sm-4">Teklif No</dt>
                        <dd class="col-sm-8">@selectedOffer.Id.ToString().Substring(0, 8)</dd>
                        
                        <dt class="col-sm-4">Yük No</dt>
                        <dd class="col-sm-8">@selectedOffer.LoadId.ToString().Substring(0, 8)</dd>
                        
                        <dt class="col-sm-4">Durum</dt>
                        <dd class="col-sm-8">
                            @if (selectedOffer.IsAccepted)
                            {
                                <span class="badge bg-success">Kabul Edildi</span>
                            }
                            else
                            {
                                <span class="badge bg-danger">Reddedildi</span>
                            }
                        </dd>
                        
                        <dt class="col-sm-4">Yük Bilgileri</dt>
                        <dd class="col-sm-8">
                            <div>@selectedOffer.FromLocation → @selectedOffer.ToLocation</div>
                            <div>Yük Tipi: @GetLoadTypeName(selectedOffer.LoadType)</div>
                            <div>Ağırlık: @selectedOffer.Weight kg</div>
                            <div>Hacim: @selectedOffer.Volume m³</div>
                        </dd>
                        
                        <dt class="col-sm-4">Şirket</dt>
                        <dd class="col-sm-8">@selectedOffer.LogisticsCompanyName</dd>
                        
                        <dt class="col-sm-4">Fiyat</dt>
                        <dd class="col-sm-8">@selectedOffer.CompanyOfferedPrice.ToString("C")</dd>
                        
                        <dt class="col-sm-4">Araç</dt>
                        <dd class="col-sm-8">@selectedOffer.VehiclePlate</dd>
                        
                        <dt class="col-sm-4">Şoför</dt>
                        <dd class="col-sm-8">@selectedOffer.DriverName</dd>
                        
                        <dt class="col-sm-4">Teslimat Tarihi</dt>
                        <dd class="col-sm-8">@selectedOffer.DeliveryDate?.ToShortDateString()</dd>
                        
                        <dt class="col-sm-4">Açıklama</dt>
                        <dd class="col-sm-8">@selectedOffer.Description</dd>
                    </dl>
                </div>
                <div class="modal-footer">
                    @if (!selectedOffer.IsAccepted)
                    {
                        <button type="button" class="btn btn-success me-2" @onclick="() => AcceptOffer(selectedOffer)">
                            <i class="bi bi-check-lg me-1"></i> Kabul Et
                        </button>
                        <button type="button" class="btn btn-danger me-2" @onclick="() => RejectOffer(selectedOffer)">
                            <i class="bi bi-x-lg me-1"></i> Reddet
                        </button>
                    }
                    <button type="button" class="btn btn-secondary" @onclick="() => selectedOffer = null">
                        Kapat
                    </button>
                </div>
            </div>
        </div>
    </div>
    <div class="modal-backdrop fade show"></div>
}

@code {
    private List<LoadOfferListDto> offers = new();
    private LoadOfferListDto? selectedOffer;
    private string errorMessage = string.Empty;
    private bool isLoading = false;

    // Yükleri LoadId'ye göre gruplama
    private IEnumerable<IGrouping<Guid, LoadOfferListDto>> GroupedOffers => offers.GroupBy(x => x.LoadId);

    private string GetLoadTypeName(LoadType type)
    {
        return type switch
        {
            LoadType.GeneralCargo => "Genel Kargo",
            LoadType.PerishableGoods => "Bozulabilir Ürünler",
            LoadType.HazardousMaterials => "Tehlikeli Maddeler",
            LoadType.FragileItems => "Kırılabilir Eşyalar",
            LoadType.BulkCargo => "Dökme Kargo",
            LoadType.Liquid => "Sıvı Kargo",
            LoadType.HighValue => "Yüksek Değerli Ürünler",
            LoadType.TemperatureSensitive => "Sıcaklık Hassas Ürünler",
            LoadType.DangerousGoods => "Tehlikeli Mallar",
            _ => "Bilinmiyor"
        };
    }

    protected override async Task OnInitializedAsync()
    {
        await LoadCustomerOffers();
    }

    private async Task LoadCustomerOffers()
    {
        try
        {
            isLoading = true;
            var response = await Http.GetAsync<List<LoadOfferListDto>>("api/LoadOffers");
            if (response != null)
            {
                offers = response;
            }
        }
        catch
        {
            errorMessage = "Teklifler yüklenirken bir hata oluştu.";
        }
        finally
        {
            isLoading = false;
        }
    }

    private async Task AcceptOffer(LoadOfferListDto offer)
    {
        try
        {
            isLoading = true;
            var response = await Http.PostAsync<AcceptLoadOfferResponse>($"api/loadoffers/{offer.Id}/accept", null);
            if (response != null && response.Success)
            {
                await LoadCustomerOffers();
                selectedOffer = null; // Modal'ı kapat
            }
            else
            {
                errorMessage = "Teklif kabul edilirken bir hata oluştu.";
            }
        }
        catch
        {
            errorMessage = "Teklif kabul edilirken bir hata oluştu.";
        }
        finally
        {
            isLoading = false;
        }
    }

    private async Task RejectOffer(LoadOfferListDto offer)
    {
        try
        {
            isLoading = true;
            var response = await Http.PostAsync<DeleteLoadOfferResponse>($"api/loadoffers/{offer.Id}/reject", null);
            if (response != null && response.Success)
            {
                // Reddedilen teklifi listeden kaldır
                offers = offers.Where(x => x.Id != offer.Id).ToList();
                selectedOffer = null; // Modal'ı kapat
            }
            else
            {
                errorMessage = "Teklif reddedilirken bir hata oluştu.";
            }
        }
        catch
        {
            errorMessage = "Teklif reddedilirken bir hata oluştu.";
        }
        finally
        {
            isLoading = false;
        }
    }

    private void ShowOfferDetails(LoadOfferListDto offer)
    {
        selectedOffer = offer;
        errorMessage = string.Empty; // Modal açıldığında hata mesajını temizle
    }
} 