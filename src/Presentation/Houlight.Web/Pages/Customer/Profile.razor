@page "/customer/profile"
@using Houlight.Domain.Entities
@using Houlight.Application.Interfaces.Repositories
@using System.Linq.Expressions
@inject ICustomerRepository CustomerRepository
@inject NavigationManager NavigationManager

<PageTitle>Profil Bilgileri - Houlight</PageTitle>

<div class="container py-4">
    @if (isLoading)
    {
        <div class="text-center">
            <div class="spinner-border text-primary" role="status">
                <span class="visually-hidden">Yükleniyor...</span>
            </div>
        </div>
    }
    else
    {
        <div class="row justify-content-center">
            <div class="col-md-8">
                <div class="card shadow-sm border-0">
                    <div class="card-body">
                        <h4 class="card-title mb-4">Profil Bilgileri</h4>
                        
                        <EditForm Model="@customer" OnValidSubmit="HandleSubmit">
                            <DataAnnotationsValidator />
                            
                            <div class="row">
                                <div class="col-md-6 mb-3">
                                    <label class="form-label">Ad</label>
                                    <InputText @bind-Value="customer.Name" class="form-control" />
                                    <ValidationMessage For="@(() => customer.Name)" />
                                </div>
                                
                                <div class="col-md-6 mb-3">
                                    <label class="form-label">Soyad</label>
                                    <InputText @bind-Value="customer.Surname" class="form-control" />
                                    <ValidationMessage For="@(() => customer.Surname)" />
                                </div>
                            </div>
                            
                            <div class="mb-3">
                                <label class="form-label">E-posta</label>
                                <InputText @bind-Value="customer.Email" class="form-control" />
                                <ValidationMessage For="@(() => customer.Email)" />
                            </div>
                            
                            <div class="mb-3">
                                <label class="form-label">Telefon</label>
                                <InputText @bind-Value="customer.PhoneNumber" class="form-control" />
                                <ValidationMessage For="@(() => customer.PhoneNumber)" />
                            </div>
                            
                            <div class="d-flex justify-content-between align-items-center">
                                <button type="submit" class="btn btn-primary">
                                    <i class="bi bi-save me-2"></i>Değişiklikleri Kaydet
                                </button>
                                
                                <a href="/customer/dashboard" class="btn btn-outline-secondary">
                                    <i class="bi bi-arrow-left me-2"></i>Geri Dön
                                </a>
                            </div>
                        </EditForm>
                    </div>
                </div>
            </div>
        </div>
    }
</div>

@code {
    private CustomerEntity customer = new();
    private bool isLoading = true;

    protected override async Task OnInitializedAsync()
    {
        try
        {
            // TODO: Gerçek müşteri ID'si kullanılacak
            var customerId = Guid.Parse("00000000-0000-0000-0000-000000000000");
            
            customer = await CustomerRepository.GetByIdAsync(customerId);
            if (customer == null)
            {
                // Müşteri bulunamadıysa yeni oluştur
                customer = new CustomerEntity
                {
                    Id = customerId,
                    CreateDate = DateTime.Now
                };
            }
        }
        catch (Exception ex)
        {
            // TODO: Hata yönetimi
            Console.WriteLine($"Hata: {ex.Message}");
        }
        finally
        {
            isLoading = false;
        }
    }

    private async Task HandleSubmit()
    {
        try
        {
            if (customer.Id == Guid.Empty)
            {
                await CustomerRepository.AddAsync(customer);
            }
            else
            {
                await CustomerRepository.UpdateAsync(customer);
            }
      
            
            NavigationManager.NavigateTo("/customer/dashboard");
        }
        catch (Exception ex)
        {
            // TODO: Hata yönetimi
            Console.WriteLine($"Hata: {ex.Message}");
        }
    }
} 